class Solution {
int aux(string& s, int i, int j, vector<vector<int>>& r) {
    if (r[i][j] != -1) return r[i][j];
    
    if (i > j) {
        return 0;
    }
    if (i == j) {
        r[i][j] = 1;
        return r[i][j];
    }

    if (s[i] == s[j]) {
        r[i][j] = 2 + aux(s, i + 1, j - 1, r);
        return r[i][j];
    }
    else {
        r[i][j] = max(aux(s, i + 1, j,r), aux(s, i, j - 1,r));
        return r[i][j];
    }

    return r[i][j];
}
public:
    int longestPalindromeSubseq(string s) {
        int n = s.length();

        vector<vector<int>> r(n, vector<int>(n, -1));
        aux(s, 0, s.length() - 1, r);
        int myMax = INT_MIN;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (r[i][j] > myMax) {
                    myMax = r[i][j];
                }
            }
        }

        return myMax;
    }
};