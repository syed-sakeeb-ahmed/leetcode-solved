class Solution {
public:
    int numDistinct(string s, string t) {
        int m = s.length();
        int n = t.length();
        if (m < n) return 0;
        vector<vector<unsigned long long>> r(m + 1, vector<unsigned long long>(n + 1, 0));
        cout << m << " " << n << endl;

        for (int i = 0; i < m + 1; i++) r[i][0] = 1;
        for (int i = 0; i < n + 1; i++) r[0][i] = 0;
        
        r[0][0] = 1;

        for (int i = 1; i < m + 1; i++) {
            for (int j = 1; j < n + 1; j++) {
                if (s[i - 1] == t[j - 1]) {
                    r[i][j] = min({r[i-1][j], r[i-1][j-1]}) + max({r[i-1][j], r[i-1][j-1]});
                }
                else {
                    r[i][j] = r[i-1][j];
                }
            }
        }

        return r[m][n];
    }
};