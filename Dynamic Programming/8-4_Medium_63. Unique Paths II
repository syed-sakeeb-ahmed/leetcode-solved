class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        if (obstacleGrid.size() == 0) return 0;
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();
        vector<vector<int>> r(m, vector<int>(n, 0));
        r[0][0] = 1;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (obstacleGrid[i][j] == 1) {
                    r[i][j] = 0;
                }
                else {
                    int up = (i - 1 >= 0) ? r[i - 1][j] : 0;
                    int left = (j - 1 >= 0) ? r[i][j - 1] : 0;
                    r[i][j] = max(r[i][j], up + left);
                }
            }
        }
        return r[m - 1][n - 1];
    }
};