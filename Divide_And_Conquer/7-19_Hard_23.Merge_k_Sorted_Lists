/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        priority_queue<pair<int, ListNode*>, vector<pair<int, ListNode*>>, greater<pair<int, ListNode*>>> pq;

        for (int i = 0; i < lists.size(); i++) {
            ListNode* curr = lists[i];
            if (curr == NULL) continue;
            pq.push({curr->val, curr});
        }
        ListNode* ans = new ListNode();
        ListNode* head = ans;
        while (!pq.empty()) {
            pair<int, ListNode*> smallest = pq.top(); pq.pop();
            ans->next = new ListNode(smallest.first);
            ans = ans->next;
            if (smallest.second->next != NULL) {
                ListNode* temp = smallest.second->next;
                pq.push({temp->val, temp});
            }
        }

        return head->next;
    }
};