class Solution {
void mergeSort(int left, int right, vector<int>& arr, int& count) {
    if (left >= right) return;

int mid = (left + right) / 2;
    mergeSort(left, mid, arr, count);
    mergeSort(mid + 1, right, arr, count);

    merge(left, mid, right, arr, count);
}

void merge(int left, int mid, int right, vector<int>& arr, int& count) {
    int i = 0;
    int j = 0;
    int k = left;

    int p = mid + 1;
    for (int i = left; i <= mid; i++) {
        while (p <= right && arr[i] > (long long) 2 * arr[p]) {
            p++;
        }
        count += p - (mid + 1);
    }

    vector<int> L,R;

    for (int i = left; i <= mid; i++) {
        L.push_back(arr[i]);
    }
    for (int i = mid + 1; i <= right; i++) {
        R.push_back(arr[i]);
    }

    while (i < L.size() && j < R.size()) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        }
        else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < L.size()) {
        arr[k] = L[i]; 
        i++;
        k++;
    }

    while (j < R.size()) {
        arr[k] = R[j];
        j++;
        k++;
    }
}
public:
    int reversePairs(vector<int>& nums) {
        int count = 0;
        mergeSort(0, nums.size() - 1, nums, count);
        return count;
    }
};