class Solution {
    int solve(vector<vector<int>*> p, int k) {
        vector<int> lower, upper;
        int mid;
        for (int i = 0; i < p.size(); i++) {
            vector<int>& curr = *p[i];
            lower.push_back(0);
            upper.push_back( curr.size() - 1);
        }
        for (int i = 0; i < p.size(); i++) {
            while (lower[i] <= upper[i]) {
                mid = (lower[i] + upper[i]) / 2;
                pair<int, int> beforeRange = {0, 0};
                int val = (*p[i])[mid];
                for (int j = 0; j < p.size(); j++) {
                    vector<int>& curr = *p[j];
                    beforeRange.first += ( lower_bound(curr.begin(), curr.end(), val) - curr.begin() );
                    beforeRange.second += ( upper_bound(curr.begin(), curr.end(), val) - curr.begin() );
                }
                if (k - 1 >= beforeRange.first && k - 1 < beforeRange.second)
                    return val;
                else if (k - 1 < beforeRange.first)
                    upper[i] = mid - 1;
                else if (k - 1 >= beforeRange.second)
                    lower[i] = mid + 1;
            }
        }
        return -1;
    }

public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        vector<vector<int>*> params = {&nums1, &nums2};
        int n = nums1.size();
        int m = nums2.size();
        int total = n + m;
        if (total % 2 == 0) {
            int one = total / 2;
            int two = one + 1;
            int a = solve(params, one);
            int b = solve(params, two);
            //cout << a << " " << b << endl;
            return (a + b) / 2.0;
        } else {
            int medianIndex = total / 2 + 1;
            return solve(params, medianIndex);
        }

        return 0.0;
    }
};