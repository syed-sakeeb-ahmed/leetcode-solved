class Solution {
void mergeSort(int left, int right, vector<pair<int,int>>& arr, vector<int>& count) {
    if (left >= right) return;

    int mid = (left + right) / 2;
    
    mergeSort(left, mid, arr, count);
    mergeSort(mid + 1, right, arr, count);

    merge(left, mid, right, arr, count);
}

void merge(int p, int m, int r, vector<pair<int,int>>& arr, vector<int>& count) {
    vector<pair<int,int>> left, right;
    int i = 0;
    int j = 0;
    int k = p;

    int z = m + 1;
    for (int i = p; i <= m; i++) {
        while (z <= r && arr[i].first > arr[z].first) {
            z++;
        }
        count[arr[i].second] += z - (m + 1);
    }

    for (int i = p; i <= m; i++) {
        left.push_back(arr[i]);
    }
    for (int i = m + 1; i <= r; i++) {
        right.push_back(arr[i]);
    }

    while (i < left.size() && j < right.size()) {
        if (left[i].first <= right[j].first) {
            arr[k] = left[i++];
        }
        else if (left[i].first > right[j].first) {
            arr[k] = right[j++];
        }
        k++;
    }

    while (i < left.size()) {
        arr[k] = left[i];
        i++;
        k++;
    }

    while (j < right.size()) {
        arr[k] = right[j];
        j++;
        k++;
    }
}
public:
    vector<int> countSmaller(vector<int>& nums) {
        vector<pair<int,int>> arr(nums.size(), {-1,-1});
        vector<int> count(nums.size(), 0);
        for (int i = 0; i < nums.size(); i++) {
            arr[i] = {nums[i], i};
        }

        mergeSort(0, nums.size() - 1, arr, count);

        
        return count;
    }
};