class Solution {
bool cycleFound = false;
vector<int> visited;
vector<vector<int>> adj;
public:
    void dfs(int k) {
        visited[k] = 1;
        for (int i = 0; i < adj[k].size(); i++) {
            int temp = adj[k][i];
            if (visited[temp] == 1) cycleFound = true;
            if (!visited[temp]) {
                dfs(temp);
            }
        }
        visited[k] = 2;
    }
    bool canFinish(int numCourses, vector<vector<int>>& p) {
        adj.assign(numCourses, vector<int>());
        visited.assign(numCourses, 0);
        for (int i = 0; i < p.size(); i++) {
            int u = p[i][0];
            int v = p[i][1];
            adj[v].push_back(u);
        }
        for (int i = 0; i < numCourses; i++) {
            if (!visited[i]) dfs(i);
        }
        return !cycleFound;
    }
};