/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
bool res = true;
pair<long,long> aux(TreeNode* root) {
    if (root == NULL) {
        return {LONG_MIN, LONG_MAX};
    }
    auto left = aux(root->left);
    if (res == false) return {-1,-1};
    auto right = aux(root->right);
    if (res == false) return {-1,-1};
    
    if (left.first == LONG_MIN && right.first == LONG_MIN) return {root->val,root->val};
    
    if (left.first == LONG_MIN) left = {LONG_MIN,LONG_MIN};
    if (right.first == LONG_MIN) right = {LONG_MAX,LONG_MAX};

    if (root->val <= left.second || root->val >= right.first) {
        res = false;
        return {-1,-1};
    }

    if (left.first == LONG_MIN) {
        return {root->val, right.second};
    }
    else if (right.first == LONG_MAX) {
        return {left.first, root->val};
    }
    else {
        return {left.first, right.second};
    }
    return {-1,-1};
}
public:
    bool isValidBST(TreeNode* root) {
        aux(root);
        return res;
    }
};