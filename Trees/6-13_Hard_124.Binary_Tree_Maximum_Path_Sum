/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int max_sum = INT_MIN;
    int helper(TreeNode* root) {
        if (root == NULL) return 0;
        int l = max(helper(root->left), 0);
        int r = max(helper(root->right), 0);
        /*
            A sequence of nodes from the deepest
            node in the left subtree to the
            root and then from the root to the deepest node
            in the right subtree is a valid path. That is 
            what we are calculating for the final output
        */
        int new_price = l + root->val + r;
        max_sum = max(max_sum, new_price);
        //Return the path with biggest value only since
        //upper nodes can't form a valid path with both
        //l and r of this node (the upper node would get two diverging paths which is invalid)
        return root->val + max(l,r);
    }
    int maxPathSum(TreeNode* root) {
        if (root == NULL) return 0;
        helper(root);
        return max_sum;
    }
};