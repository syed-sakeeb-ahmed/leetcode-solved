/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

//Main thought process that was used was by 
//thinking in terms of an inorder vector array
//
class Solution {
public:
    TreeNode* prev = NULL, *first = NULL, *second = NULL;
    void recoverTree(TreeNode* root) {
        solver(root);
        if (first && second) {
            swap(first->val, second->val);
        }
    }
    void solver(TreeNode* root) {
        if (root == NULL) return;
        solver(root->left);

        if (prev != NULL && prev->val > root->val) {
            if (!first) {
                first = prev;
            }
            second = root;
        }
        prev = root;

        solver(root->right);
    }
};