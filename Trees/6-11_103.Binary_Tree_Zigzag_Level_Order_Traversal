/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    void solve(TreeNode* root, vector<vector<int>>& list, int level) {
        if (root == nullptr) return;

        if (list.size() < level + 1) {
            list.push_back({root->val});
        }
        else {
            list[level].push_back(root->val);
        }

        
        solve(root->left, list, level + 1);
        solve(root->right, list, level + 1);
    }
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>> output;
        if (root == NULL) return output;
        bool right = false;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()) {
            vector<int> t(q.size());
            int n = q.size();
            for (int i = 0; i < n; i++) {
                TreeNode* node = q.front();
                q.pop();
                int ind = (right) ? n - 1 - i : i;
                t[ind] = node->val;
                if (node->left) {
                    q.push(node->left);
                }
                if (node->right) {
                    q.push(node->right);
                }
            }
            output.push_back(t);
            right = !right;
        }
        return output;
    }
};