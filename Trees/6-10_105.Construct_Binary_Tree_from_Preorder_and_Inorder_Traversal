/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    private:
    TreeNode* solve(vector<int>& preorder, unordered_map<int,int>& mp, int& ind, int start, int end) {
        if(start > end) {
            return NULL;
        }
        TreeNode* root = new TreeNode(preorder[ind++]);
        int mid = mp[root->val];
        root->left = solve(preorder, mp, ind, start, mid - 1);
        root->right = solve(preorder, mp, ind, mid + 1, end);
        return root;
    }
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        unordered_map<int,int> mp;
        for (int i = 0; i < inorder.size(); i++) mp[inorder[i]] = i;
        int ind = 0;
        return solve(preorder, mp, ind, 0, inorder.size() - 1);
    }
};