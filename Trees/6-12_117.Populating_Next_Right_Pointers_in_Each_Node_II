/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        if (root == nullptr) return root;
        queue<Node*> q;
        q.push(root);
        Node* prev = nullptr;
        while(!q.empty()) {
            int n = q.size();

            for (int j = 0; j < n; j++) {
                Node* node = q.front();
                q.pop();
                if (prev) {
                    prev->next = node;
                    prev = node;
                }
                else if (!prev) {
                    prev = node;
                }

                if (node->left) q.push(node->left);
                if (node->right) q.push(node->right);
            }
            prev = nullptr;
        }
        return root;
    }
};