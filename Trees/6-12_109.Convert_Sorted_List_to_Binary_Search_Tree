/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    void solve(TreeNode*& root, vector<int>& mp, int start, int end) {
        if (start > end) {
            return;
        }
        int mid = (start + end) / 2;
        root = new TreeNode(mp[mid]);
        solve(root->left, mp, start, mid - 1);
        solve(root->right, mp, mid + 1, end);
    }
public:
    TreeNode* sortedListToBST(ListNode* head) {
        if (head == nullptr) return nullptr;
        vector<int> mp;
        ListNode* current = head;
        while(current != nullptr) {
            mp.push_back(current->val);
            current = current->next;
        }
        TreeNode* root;
        solve(root, mp, 0, mp.size() - 1);
        return root;
    }
};