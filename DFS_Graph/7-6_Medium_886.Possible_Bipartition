class Solution {
unordered_map<int, vector<int>> adj;
unordered_map<int,int> colors;
unordered_map<int,bool> visited;
bool dfs(int node, int pColor) {
    colors[node] = pColor;
    visited[node] = true;
    for (int i = 0; i < adj[node].size(); i++) {
        int temp = adj[node][i];
        if (!visited[temp]) {
            int temp_color = (pColor == -1) ? 1 : -1;
            if(!dfs(temp, temp_color)) return false;
        }
        if (colors[temp] == pColor) return false;
    }
    return true;
}
public:
    bool possibleBipartition(int n, vector<vector<int>>& dislikes) {
        for (int i = 0; i < dislikes.size(); i++) {
            int a = dislikes[i][0], b = dislikes[i][1];
            adj[a].push_back(b);
            adj[b].push_back(a);
        }
        for (int i = 1; i < n + 1; i++) {
            if (!visited[i]) {
                if (!dfs(i, 1)) return false;
            }
        }
        return true;
    }
};