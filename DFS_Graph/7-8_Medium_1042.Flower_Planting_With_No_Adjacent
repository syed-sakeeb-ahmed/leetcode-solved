class Solution {
unordered_map<int,int> fmap;
vector<int> result;
void dfs(int node, unordered_map<int,vector<int>>& adj, vector<int>& visited) {
    visited[node] = 1;
    vector<bool> flowers(5, false);
    for (int i = 0; i < adj[node].size(); i++) {
        int temp = adj[node][i];
        if (fmap[temp] != 0) flowers[fmap[temp]] = true;
    }

    for (int i = 1; i < flowers.size(); i++) {
        if (flowers[i] == false) {
            fmap[node] = i;
            result[node - 1] = i;
            break;
        }
    }
    for (int i = 0; i < adj[node].size(); i++) {
        int temp = adj[node][i];
        if (!visited[temp]) {
            dfs(temp, adj, visited);
        }
    }
}
public:
    vector<int> gardenNoAdj(int n, vector<vector<int>>& paths) {
        vector<int> visited(n + 1, 0);
        result.resize(n, -1);
        unordered_map<int,vector<int>> adj;
        for (int i = 0; i < paths.size(); i++) {
            int a = paths[i][0], b = paths[i][1];
            adj[a].push_back(b);
            adj[b].push_back(a);
        }
        for (int i = 1; i < n + 1; i++) {
            if (!visited[i]) {
                dfs(i, adj, visited);
            }
        }
        return result;
    }
};