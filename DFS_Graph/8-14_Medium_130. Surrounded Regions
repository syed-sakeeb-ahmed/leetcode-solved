class Solution {
vector<int> col = {-1,1,0,0 };
vector<int> row = {0,0,-1,1 };
void dfs(int i, int j, vector<vector<int>>& v, vector<vector<char>>& board, bool capture) {
    v[i][j] = 1;
    if (capture) board[i][j] = 'X';
    for (int k = 0; k < 4; k++) {
        int temp = col[k];
        int temp2 = row[k];
        if (i + temp2 >=0 && i + temp2 < board.size() && j + temp >= 0 && j + temp < board[0].size() && !v[i + temp2][j + temp] && board[i + temp2][j + temp] == 'O') dfs(i + temp2, j + temp, v,board,capture);
    }
}
public:
    void solve(vector<vector<char>>& board) {
        if (board.size() == 2) return;
        int m = board.size();
        int n = board[0].size();
        vector<vector<int>> v(m, vector<int>(n, 0));
        bool broken = false;
        for (int i = 0; i < m; i++) {
            if (i > 0 && i < m - 1) continue;
            for (int j = 0; j < n; j++) {
                if (!v[i][j] && board[i][j] == 'O') 
                {dfs(i,j,v,board,false);}
            }
        }

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (j > 0 && j < n - 1) continue;
                if (!v[i][j] && board[i][j] == 'O') 
                {dfs(i,j,v,board,false);}
            }
        }
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (!v[i][j] && board[i][j] == 'O') 
                {dfs(i,j,v,board,true);}
            }
        }
    }
};