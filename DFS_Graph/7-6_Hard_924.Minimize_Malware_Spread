class Solution {
public:
    //Super slow prolly cuz I didn't use adjList
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        unordered_map<int, bool> isInfected;
        unordered_map<int,int> infectIndex;
        unordered_map<int,bool> visited; 
        vector<int> toRemove;
        for (int i = 0; i < initial.size(); i++) {
            int temp = initial[i];
            isInfected[temp] = true;
        }
        for (int i = 0; i < initial.size(); i++) {
            infectIndex[initial[i]] = i;
        }
        
        queue<int> q;
        int maxCount = -1;
        for (int i = 0; i < n; i++) {
            int count = 0;
            int componentCount = 0;
            vector<int> tempInfected;
            if (!visited[i]) {
                q.push(i);
            }
            while (!q.empty()) {
                int temp = q.front();
                q.pop();
                visited[temp] = true;
                componentCount++;
                if (isInfected[temp]) {
                    tempInfected.push_back(temp);
                    count++;
                }
                for (int j = 0; j < n; j++) {
                    if (graph[temp][j] == 1 && !visited[j]) {
                        q.push(j);
                    }
                }
            }
            if (count == 1 && componentCount > maxCount) {
                maxCount = componentCount;
                toRemove.clear();
                toRemove.push_back(tempInfected.back());
            }
            else if (count == 1 && componentCount == maxCount) {
                maxCount = componentCount;
                toRemove.push_back(tempInfected.back());
            }
        }
        if (toRemove.size() == 0) {
            sort(initial.begin(), initial.end());
            return initial[0];
        }
        sort(toRemove.begin(), toRemove.end());
        return toRemove[0];
    }
};