class Solution {
private:
    double dfs(unordered_map<string, vector<pair<string, double>>>& mp, unordered_map<string, bool>& visited,  string start, string end, double val, bool& found) {
        if (start == end) {
            found = true;
            return val;
        }

        visited[start] = true;

        for (const auto& i : mp[start]) {
            if (!visited[i.first]) {
                double output = dfs(mp, visited, i.first, end, val * i.second, found);
                if (found) return output;
            }
        }
        return -1.0;
    }
public:
    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {
        unordered_map<string, vector<pair<string, double>>> mp;
        for (int i = 0; i < equations.size(); i++) {
            string a = equations[i][0];
            string b = equations[i][1];
            double val = values[i];
            mp[a].push_back({b, val});
            mp[b].push_back({a,1.0 / val});
        }

        vector<double> output;
        for (int i = 0; i < queries.size(); i++) {
            string start = queries[i][0], end = queries[i][1];
            if (mp.find(start) == mp.end() || mp.find(end) == mp.end()) {
                output.push_back(-1.0);
                continue;
            }
            unordered_map<string, bool> visited;
            bool found = false;
            double output_val = dfs(mp, visited, start, end, 1.0, found);
            output.push_back( (found) ? output_val : -1.0);
        }
        return output;
    }
};