class Solution {
private:
    void dfs(string node,unordered_map<string, priority_queue<string, vector<string>,  greater<string>>>& adj, vector<string>& output) {
        while (!adj[node].empty()) {
            string child = adj[node].top();
            adj[node].pop();
            dfs(child, adj, output);
        }
        output.push_back(node);
    }
public:
    vector<string> findItinerary(vector<vector<string>>& tickets) {
        unordered_map<string, priority_queue<string, vector<string>,  greater<string>>> adj;
        for (int i = 0; i < tickets.size(); i++) {
            string from = tickets[i][0];
            string to = tickets[i][1];
            adj[from].push(to);
        }
        vector<string> output;
        dfs("JFK", adj, output);
        reverse(output.begin(), output.end());
        return output;
    }
};