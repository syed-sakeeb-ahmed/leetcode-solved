class Solution {
public:
    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {
        
        if (n == 1) return {0};

        vector<vector<int>> adjList(n);
        vector<int> degree(n);
        for (int i = 0; i < edges.size(); i++) {
            int u = edges[i][0], v = edges[i][1];
            adjList[u].push_back(v);
            adjList[v].push_back(u);
            degree[u]++;
            degree[v]++;
        }

        queue<int> q;
        for (int i = 0; i < n; i++) {
            if (degree[i] == 1) {
                q.push(i);
            }
        }

        int totalNodes = n;
        while (totalNodes > 2) {
            int leafCount = q.size();
            totalNodes -= leafCount;
            for (int i = 0; i < leafCount; i++) {
                int node = q.front();
                q.pop();
                for (int p : adjList[node]) {
                    if (--degree[p] == 1) q.push(p);
                }
            }
            
        }
        std::vector<int> result;
        while (!q.empty()) {
            result.push_back(q.front());
            q.pop();
        }
        return result;

    }
};