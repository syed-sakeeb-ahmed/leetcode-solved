class Solution {
bool dfs(int node, vector<vector<int>>& graph, vector<int>& color, int lastColor) {
    
    
    color[node] = !lastColor;
    
    for (int i = 0; i < graph[node].size(); i++) {
        int v = graph[node][i];
        if (color[v] == color[node]) return false;
        if (color[v] == -1) if(!dfs(v, graph, color, color[node])) return false;
    }

    return true;
}
public:
    bool isBipartite(vector<vector<int>>& graph) {
        vector<int> color(graph.size(), -1);
        for (int i = 0; i < graph.size(); i++) {
            if (color[i] == -1) {
                if(!dfs(i, graph, color, 1)) return false;
            }
        }
        return true;
    }
};