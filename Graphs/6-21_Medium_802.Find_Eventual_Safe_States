class Solution {
bool dfs(int node, vector<vector<int>>& graph, vector<bool>& inStack, vector<bool>& visit) {
    if (inStack[node]) return true;
    if (visit[node]) return false;

    inStack[node] = true;
    visit[node] = true;
    for (int i = 0; i < graph[node].size(); i++) {
        int v = graph[node][i];
        if (dfs(v,graph, inStack, visit)) return true;
    }
    inStack[node] = false;
    return false;
}
public:
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        int n = graph.size();
        vector<bool> inStack(n), visit(n);
        for (int i = 0; i < graph.size(); i++) {
            dfs(i, graph, inStack,visit);
        }
        vector<int>output;
        for (int i = 0; i < graph.size(); i++) {
            if (!inStack[i]) output.push_back(i);
        }
        return output;
    }
};