class Solution {
private:
    bool hasCycle(int& node, vector<vector<int>>& adj, vector<char>& state) {
        if (state[node] == 1) return true;
        if (state[node] == 2) return false;

        state[node] = 1;
        for (int n : adj[node]) {
            if (hasCycle(n, adj, state)) return true;
        }

        state[node] = 2;

        return false;
    }
public:
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        int n = prerequisites.size();
        vector<vector<int>> adj(numCourses);
        vector<char> state(numCourses, 0);
        for (int i = 0; i < n; i++) {
            adj[prerequisites[i][1]].push_back(prerequisites[i][0]);
        }

        for (int i = 0; i < numCourses; i++) {
            if (hasCycle(i, adj, state)) return false;
        }
        
        return true;
    }
};