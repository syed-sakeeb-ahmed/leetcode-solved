class Solution {
private:
    int solver(vector<vector<int>>& matrix, vector<vector<int>>& memo, int i, int j) {
        if (memo[i][j] != 0) return memo[i][j];
        int count = 1;
        if (i + 1 < matrix.size()) {
            if (matrix[i + 1][j] > matrix[i][j])
            count = max(count, 1 + solver(matrix, memo, i + 1, j));
        }
        if (i - 1 >= 0) {
            if (matrix[i - 1][j] > matrix[i][j])
            count = max(count, 1 + solver(matrix,memo, i - 1, j));
        }
        if (j + 1 < matrix[0].size()) {
            if (matrix[i][j + 1] > matrix[i][j])
            count = max(count, 1 + solver(matrix,memo, i, j + 1));
        }
        if (j - 1 >= 0) {
            if (matrix[i][j - 1] > matrix[i][j])
            count = max(count, 1 + solver(matrix,memo, i, j - 1));
        }
        memo[i][j] = count;
        return memo[i][j];

    }
public:
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        int m = 0;
        vector<vector<int>> memo(matrix.size(), vector<int>(matrix[0].size(), 0));
        for (int i = 0; i < matrix.size(); i++) {
            for (int j = 0; j < matrix[0].size(); j++) {
                m = max(m, solver(matrix, memo, i, j));
            }
        }
        return m;
    }
};