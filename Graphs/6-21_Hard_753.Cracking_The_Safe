class Solution {
bool dfs(int n, int k,string& ans, unordered_set<string>& visited) {
    if (visited.size() == pow(k, n)) return true;

    string suffix = ans.substr(ans.size() - (n - 1), n -1);
    string node = suffix + '0';
    for (int i = 0; i < k; i++) {
        node[n - 1] = i + '0';
        if (!visited.count(node)) {
            visited.insert(node);
            ans += (i + '0');

            if (dfs(n,k,ans,visited)) return true;

            visited.erase(node);
            ans.pop_back();
        }
    }
    return false;
}
public:
    string crackSafe(int n, int k) {
        unordered_set<string>visited;
        string ans = string(n, '0');
        visited.insert(ans);
        dfs(n,k,ans,visited);
        return ans;
    }
};