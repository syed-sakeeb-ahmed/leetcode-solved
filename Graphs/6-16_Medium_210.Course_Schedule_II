class Solution {
public:
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        vector<vector<int>> out_edges(numCourses);
        vector<int> in_edges(numCourses);
        int n = prerequisites.size();
        for (int i = 0; i < n; i++) {
            out_edges[prerequisites[i][1]].push_back(prerequisites[i][0]);
            in_edges[prerequisites[i][0]]++;
        }
        vector<int> order;
        queue<int> q;
        int nn = in_edges.size();
        for(int i = 0; i < nn; i++) {
            if (in_edges[i] == 0) q.push(i);
        }
        while(!q.empty()) {
            int n = q.front();
            q.pop();
            order.push_back(n);
            for (const auto& i : out_edges[n]) {
                in_edges[i]--;
                if (in_edges[i] == 0) q.push(i);
            }
        }

        if (order.size() != numCourses) return {};

        return order;
        
    }
};