#include <bits/stdc++.h>
using namespace std;


long double distance(int x1, int y1, int x2, int y2, int r1, int r2) {
    return (sqrt(pow(x1-x2,2) + pow(y1-y2,2)) - (r1 + r2));
}

class UFDS {
    private:
        vector<int> p,rank;
        int numSets;
    public:
        UFDS(int n) {
            p.assign(n,0); for(int i = 0; i < n; i++) p[i] = i;
            rank.assign(n,0);
            numSets = n;
        }
        
        bool sameSet(int i, int j) {
            return findSet(i) == findSet(j);
        }
        
        int sizeSet() {
            return numSets;
        }
        
        int findSet(int i) {
            return (p[i] == i) ? i : (p[i] = findSet(p[i]));
        }
        
        void unionSet(int i, int j) {
            int x = findSet(i), y = findSet(j);
            if (x == y) return;
            if (rank[x] > rank[y]) swap(x,y);
            p[x] = y;
            if (rank[x] == rank[y]) rank[y]++;
            numSets--;
        }
};
vector<tuple<int,int,int>> CL;
int main() {
    int N;
    scanf("%d ", &N);
    int n = N;
    CL.clear();
    while (n--) {
        int x,y,r;
        scanf("%d %d %d ", &x,&y,&r);
        CL.push_back({x,y,r});
    }
    vector<tuple<long double,int,int>> EL;
    for (int i = 0; i < CL.size(); i++) {
        int x1,y1,r1;
        tie(x1,y1,r1) = CL[i];
        for (int j = 0; j < CL.size(); j++) {
            if (i == j) continue;
            int x2,y2,r2;
            tie(x2,y2,r2) = CL[j];
            long double dist = distance(x1,y1,x2,y2,r1,r2);
            EL.push_back({dist,i,j});
        }
    }
    
    sort(EL.begin(), EL.end());
    UFDS us(N);
    long double mst = 0;
    for (int i = 0; i < EL.size(); i++) {
        int y,z;
        long double x;
        tie(x,y,z) = EL[i];
        if (us.sameSet(y,z)) continue;
        mst += x;
        us.unionSet(y,z);
        if (us.sizeSet() == 1) break;
    }
    printf("%.8Lf\n", mst);
    return 0;
}