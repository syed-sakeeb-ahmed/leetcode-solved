#include <bits/stdc++.h>

using namespace std;

vector<int> taken;
vector<vector<pair<int,int>>> adj;
priority_queue<tuple<int,int,int>, vector<tuple<int,int,int>>, greater<tuple<int,int,int>>> pq;
vector<int> parent;

void process(int node) {
    taken[node] = 1;
    for (int i = 0; i < adj[node].size(); i++) {
        pair<int,int> temp = adj[node][i];
        if (!taken[temp.second]) pq.push({temp.first,temp.second,node});
    }
}

int main() {
    
    int n;
    scanf("%d ", &n);
    adj.assign(n + 1, vector<pair<int,int>>());
    taken.assign(n + 1,0);
    parent.assign(n + 1, 0);
    pq = priority_queue<tuple<int,int,int>, vector<tuple<int,int,int>>, greater<tuple<int,int,int>>>();
    for (int i = 1; i < n + 1; i++) {
        for (int j = 1; j < n + 1; j++) {
            int num;
            scanf("%d ", &num);
            if (i == j) continue;
            adj[i].push_back({num, j});
            adj[j].push_back({num,i});
            //cout << num << ",";
        }
        //cout << endl;
    }
    
    process(1);
    int count = 0;
    priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> final;
    while (!pq.empty()) {
        tuple<int,int,int> temp = pq.top(); pq.pop();
        int second = get<1>(temp);
        int third = get<2>(temp);
        if (taken[second]) continue;
        process(second);
        count++;
        parent[second] = third;
        printf("%d %d\n", third, second);
        if (count == n - 1) break;
    }
    
    
    
    return 0;
    
}