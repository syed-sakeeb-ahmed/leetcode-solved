class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        int n = nums.size();
        deque<int> dq;
        vector<int> arr;

        //We basically always want the index of the largest element
        //to always be at the front of the queue in this algo

        for (int i = 0; i < n; i++) {
            //Front index is out of the current window
            while (!dq.empty() && dq.front() <= i - k) dq.pop_front();
            //Remove all elements in the deck that are smaller than
            //the element at current index
            while (!dq.empty() && nums[dq.back()] < nums[i]) {
                dq.pop_back();
            }

            dq.push_back(i);

            //Push the largest element which is the front 
            //into our output array
            //We forced the front to always be the largest 
            //with our invariant
            if (i >= k - 1) {
                arr.push_back(nums[dq.front()]);
            }
        }
        return arr;
    }
};