class Solution {
int max_num = 0;
void merge(int p, int q, int r, vector<int>& temp) {
    vector<int> t1,t2;
    for (int i = p; i <= q; i++) {
        t1.push_back(temp[i]);
    }
    for (int i = q + 1; i <= r; i++) t2.push_back(temp[i]);
    
    max_num = max(max_num, t2[t2.size() - 1] - t1[0]);
    int t,b,cur;
    t = b = 0;
    cur = p;
    while (t < t1.size() && b < t2.size()) {
        if (t1[t] < t2[b]) {
            temp[cur++] = t1[t++];
        }
        else {
            temp[cur++] = t2[b++];
        }
    }
    while (t < t1.size()) temp[cur++] = t1[t++];
    while (b < t2.size()) temp[cur++] = t2[b++];
}

void mergeSort(int i, int j, vector<int>& temp) {
    if (i >= j) return;
    int mid = (i + j) / 2;
    mergeSort(i, mid, temp);
    mergeSort(mid + 1, j, temp);

    merge(i,mid,j,temp);
}

public:
    int maxProfit(vector<int>& prices) {
            if (prices.size() == 1) return 0;
            mergeSort(0,prices.size() - 1, prices);
            return max_num;
    }
};